#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(set = 4, binding = 1) uniform texture3D uDensityTex; // optional
layout(set = 4, binding = 2) uniform sampler   uDensitySamp;

layout(location = 0) rayPayloadEXT hitPayload prd;

const float msaa_3 = 1.0 / 3.0;
int N_SAMPLES = 9;
vec2 MSAA[9] = vec2[](
    vec2(-msaa_3, -msaa_3), vec2(0.0, -msaa_3), vec2(msaa_3, -msaa_3),
    vec2(-msaa_3, 0.0), vec2(0.0, 0.0), vec2(msaa_3, 0.0),
    vec2(-msaa_3, msaa_3), vec2(0.0, msaa_3), vec2(msaa_3, msaa_3)
);

void main() 
{
    // MSAA determination
    if (int(sceneData.data.z) == 2) {
        N_SAMPLES = 4;
        MSAA[0] = vec2(-.25, -.25);
        MSAA[1] = vec2(-.25, .25);
        MSAA[2] = vec2(.25, -.25);
        MSAA[3] = vec2(.25, .25);
    }

    if (int(sceneData.data.z) == 1) {
        N_SAMPLES = 1;
        MSAA[0] = vec2(0, 0);
    }

    vec3 hitValues = vec3(0);
    for(int smpl = 0; smpl < N_SAMPLES; smpl++) {

        // Determine MSAA offset
        vec2 offset = vec2(MSAA[smpl]);

        mat4 invView = inverse(sceneData.view);
        mat4 invProj = inverse(sceneData.proj);
        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + offset;
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin    = invView * vec4(0, 0, 0, 1);
        vec4 target    = invProj * vec4(d.x, d.y, 1, 1);
        vec4 direction = invView * vec4(normalize(target.xyz), 0);
        uint rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin     = 0.001;
        float tMax     = 10000.0;
        prd.recursionDepth = 0;

        traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,           // rayFlags
            0xFF,               // cullMask
            0,                  // sbtRecordOffset
            0,                  // sbtRecordStride
            0,                  // missIndex
            origin.xyz,         // ray origin
            tMin,               // ray min range
            direction.xyz,      // ray direction
            tMax,               // ray max range
            0                   // payload (location = 0)
        );

        hitValues += prd.hitValue / float(N_SAMPLES);
    }

    // Directly store
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValues, 1.0));
}
