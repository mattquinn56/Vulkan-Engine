#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

const vec2 S4[4] = vec2[](
    vec2(-0.25, -0.25), vec2( 0.25, -0.25),
    vec2(-0.25,  0.25), vec2( 0.25,  0.25)
);

vec2 halton2(uint n){
    float h2=0.0,f2=0.5; uint i=n+1u;
    for(; i>0u; i/=2u){ h2 += f2*float(i%2u); f2*=0.5; }
    float h3=0.0,f3=1.0/3.0; i=n+1u;
    for(; i>0u; i/=3u){ h3 += f3*float(i%3u); f3*=1.0/3.0; }
    return vec2(h2,h3);
}

vec3 traceAt(vec2 jitter)
{
    vec2 res = vec2(gl_LaunchSizeEXT.xy);
    vec2 pixel = vec2(gl_LaunchIDEXT.xy) + jitter;
    vec2 uv = pixel / res;
    vec2 ndc = uv * 2.0 - 1.0;

    mat4 invView = inverse(sceneData.view);
    mat4 invProj = inverse(sceneData.proj);
    vec4 o = invView * vec4(0,0,0,1);
    vec4 t = invProj * vec4(ndc,1,1);
    vec4 d = invView * vec4(normalize(t.xyz),0);

    prd.recursionDepth = 0;
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0,0,0, o.xyz, 0.001, d.xyz, 10000.0, 0);
    return prd.hitValue;
}

void main()
{
    bool useTAA = (sceneData.data.w > 0.5);

    vec3 color;

    if (useTAA) {
        // 1 spp with low-discrepancy jitter
        uint frame = uint(sceneData.data.x);
        vec2 j = halton2(frame) - 0.5;
        color = traceAt(j);
    } else {
        // Adaptive MSAA: center sample, edge test with two probes
        vec3 c0 = traceAt(vec2(0.0));
        vec3 c1 = traceAt(S4[0]*0.5);
        vec3 c2 = traceAt(S4[1]*0.5);

        float thresh = 0.08;
        float d1 = length(c0 - c1);
        float d2 = length(c0 - c2);
        bool edge = (max(d1,d2) > thresh);

        if (!edge) {
            color = c0;
        } else {
            vec3 c3 = traceAt(S4[2]*0.5);
            vec3 c4 = traceAt(S4[3]*0.5);
            color = 0.2*(c0 + c1 + c2 + c3 + c4);
        }
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color,1));
}