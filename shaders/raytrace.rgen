#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

const int N_SAMPLES = 8;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

void main() 
{
    vec3 hitValues = vec3(0);
    for(int smpl = 0; smpl < N_SAMPLES; smpl++) {

        // Determine jitter
        int frame = int(sceneData.data.x);
        vec2 subpixel_jitter = vec2(0.5);
        if (frame != 0) {
            subpixel_jitter = randomVec2(vec2(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, sin(sceneData.data.x)));
        }

        mat4 invView = inverse(sceneData.view);
        mat4 invProj = inverse(sceneData.proj);
        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin    = invView * vec4(0, 0, 0, 1);
        vec4 target    = invProj * vec4(d.x, d.y, 1, 1);
        vec4 direction = invView * vec4(normalize(target.xyz), 0);
        uint rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin     = 0.001;
        float tMax     = 10000.0;
        prd.recursionDepth = 0;

        traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,           // rayFlags
            0xFF,               // cullMask
            0,                  // sbtRecordOffset
            0,                  // sbtRecordStride
            0,                  // missIndex
            origin.xyz,         // ray origin
            tMin,               // ray min range
            direction.xyz,      // ray direction
            tMax,               // ray max range
            0                   // payload (location = 0)
        );

        hitValues += prd.hitValue / float(N_SAMPLES);
    }

    // Directly store
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValues, 1.0));

    // Do accumulation over time
    /*
    if(frame > 1) {
        float a = 1.0f / float(frame + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, prd.hitValue, a), 1.f));
    } else {
        // First frame, replace the value in the buffer
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
    }*/
}
